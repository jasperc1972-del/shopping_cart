-- 使用 UTF8 編碼
CREATE DATABASE IF NOT EXISTS shopping_cart CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE shopping_cart;

-- 使用者表
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE
);

-- 商品表
CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    stock INT NOT NULL,
    image_url VARCHAR(255)
);

-- 購物車項目表
CREATE TABLE cart_items (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    product_id INT NOT NULL,
    quantity INT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (product_id) REFERENCES products(id)
);


-- 插入使用者
INSERT INTO users (username) VALUES ('jasper');

-- 插入商品
INSERT INTO products (name, price, stock, image_url) VALUES
('蘋果', 30.00, 100, 'apple.jpg'),
('香蕉', 20.00, 80, 'banana.jpg'),
('鳳梨', 50.00, 50, 'pineapple.jpg');

-- 插入購物車項目
INSERT INTO cart_items (user_id, product_id, quantity) VALUES
(1, 1, 2),  -- jasper 買了 2 顆蘋果
(1, 2, 3);  -- jasper 買了 3 根香蕉

SELECT 
 p.name AS 商品名稱,
 p.price AS 單價,
 c.quantity AS 數量,
 (p.price * c.quantity) AS 小計,
 p.image_url AS 圖片
FROM cart_items c
JOIN products p ON c.product_id = p.id
WHERE c.user_id = 1;









shopping_cart/
├── app/
│   ├── __init__.py              ← 建立 Flask app 並註冊 Blueprint
│   ├── extensions.py            ← 放 SQLAlchemy、LoginManager 等擴充套件
│
│   ├── models/                  ← 資料庫模型（Model）
│   │   ├── product_model.py     ← 商品資料表 Product
│   │   ├── cart_item_model.py   ← 購物車項目 CartItem
│   │   └── user_model.py        ← 使用者 User（如果有登入功能）
│
│   ├── routes/                  ← 路由控制器（View / Controller）
│   │   ├── product_routes.py    ← 商品瀏覽與加入購物車
│   │   ├── cart_routes.py       ← 顯示購物車、刪除項目
│   │   └── init_routes.py       ← 初始化資料表與測試資料
│
│   ├── templates/               ← HTML 模板
│   │   ├── products.html        ← 商品列表頁
│   │   └── view_cart.html       ← 購物車頁面
│
│   └── static/                  ← CSS、圖片、JS 等靜態資源
│       └── style.css
│
├── config.py                    ← 資料庫連線與設定
└── run.py                       ← 啟動 Flask 專案
1. 商品瀏覽頁面 
• 	顯示所有商品（名稱、價格、庫存、圖片）
• 	每個商品附加「加入購物車」按鈕
• 	可選擇數量後送出表單
2. 結帳流程 
• 	顯示購物車總金額
• 	模擬結帳按鈕（未來可串接付款 API）
• 	清空購物車或建立訂單記錄
3. 使用者登入系統
• 	建立  表的登入/註冊功能
• 	讓購物車與使用者帳號綁定
• 	使用 Flask-Login 管理 session
4. 商品管理後台（CRUD）
• 	管理者可以新增、修改、刪除商品
• 	可設定庫存、價格、圖片等欄位
